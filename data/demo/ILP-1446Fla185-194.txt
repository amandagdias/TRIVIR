Strongly Typed Inductive Concept Learning

P.A. Each, C. Giraud-Carrier and J.W. Lloyd

Department of Computer Science, University of Bristol
Merchant Venturers Building, Woodland Road, Bristol BS8 lUB, United Kingdom
{flach,cgc,jwl}@cs.bris.ac.uk http://www.cs.bris.ac.uk/Research/MachineLearning/



Abstract. In this paper we argue that the use of a language with a type system,
together with higher-order facilities and functions, provides a suitable basis for
knowledge representation in inductive concept learning and, in particular, illuminates 
the relationship between attribute-value learning and inductive logic
programming (ILP). Individuals are represented by closed terms: tuples of constants 
in the case of attribute-value learning; arbitrarily complex terms in the
case of ILP. To illustrate the point, we take some learning tasks from the
machine learning and ILP literature and represent them in Escher, a typed,
higher-order, functional logic programming language being developed at the
University of Bristol. We argue that the use of a type system provides better
ways to discard meaningless hypotheses on syntactic grounds and encompasses
many ad hoc approaches to declarative bias.
References

1.	L. De Raedt & W. Van Laer. Inductive constraint logic. Proc. 6th Int. Workshop on
Algorithmic Learning Theory, LNAI 997, pp.80—94, 1995.
2.	L. De Raedt & L. Dehaspe. Clausal Discovery. Machine Learning 26(213):99—146, 1997.
3.	J.W. Lloyd. Programming in an Integrated Functional and Logic Language. Journal of
Functional and Logic Programming, 1998 (to appear).
4.	T.M. Mitchell. Machine Learning. McGraw-Hill, 1997.
5.	A. Srinivasan, S. Muggleton, R. King & M. Sternberg. Mutagenesis: ILP experiments in a
non-determinate biological domain. Proc. 4th Inductive Logic Programming Workshop,
GMD-Studien 237, 1994.
